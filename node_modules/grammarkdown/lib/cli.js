/*!
 *  Copyright 2015 Ron Buckton (rbuckton@chronicles.org)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
var path = require("path");
var read_package_1 = require("./read-package");
var options_1 = require("./options");
var grammar_1 = require("./grammar");
try {
    require("source-map-support").install();
}
catch (e) { }
var knownOptions = {
    "help": { shortName: "h", type: "boolean", description: "Prints this message." },
    "version": { shortName: "v", type: "boolean", description: "Prints the version." },
    "out": { shortName: "o", param: "FILE", type: "file", description: "Specify the output file." },
    "format": { shortName: "f", param: "FORMAT", type: { "markdown": options_1.EmitFormat.markdown, "ecmarkup": options_1.EmitFormat.ecmarkup, "html": options_1.EmitFormat.html }, description: "The output format." },
    "noEmit": { type: "boolean", description: "Does not emit output." },
    "noEmitOnError": { type: "boolean", description: "Does not emit output if there are errors." },
    "noChecks": { type: "boolean", description: "Does not perform static checking of the grammar." },
    "emitLinks": { type: "boolean", hidden: true },
    "usage": { aliasFor: ["--help"], hidden: true },
    "md": { aliasFor: ["--format", "markdown"], hidden: true },
};
function main() {
    var opts = options_1.parse(knownOptions);
    if (opts.help) {
        printUsage();
    }
    else if (opts.version) {
        printVersion();
    }
    else {
        performCompilation(opts);
    }
}
function printUsage() {
    var node_package = read_package_1.readPackageSync(path.resolve(__dirname, "../package.json"));
    options_1.usage(knownOptions, 25, function (writer) {
        writer.writeln("Version " + node_package.version);
        writer.writeOption("Syntax:", "grammarkdown [options] [...files]");
        writer.writeln();
        writer.writeOption("Examples:", "grammarkdown es6.grammar");
        writer.writeOption("", "grammarkdown --out es6.md --format markdown es6.grammar");
        writer.writeln();
        writer.writeln("Options:");
    });
}
function printVersion() {
    var node_package = read_package_1.readPackageSync(path.resolve(__dirname, "../package.json"));
    console.log(node_package.version);
}
function performCompilation(options) {
    var compilerOptions = options_1.getDefaultOptions();
    if (options.out)
        compilerOptions.out = options.out;
    if (options.noChecks)
        compilerOptions.noChecks = true;
    if (options.noEmit)
        compilerOptions.noEmit = true;
    if (options.noEmitOnError)
        compilerOptions.noEmitOnError = true;
    if (options.emitLinks)
        compilerOptions.emitLinks = true;
    compilerOptions.format = options.format || options_1.EmitFormat.markdown;
    var inputFiles = options.rest;
    var grammar = new grammar_1.Grammar(inputFiles, compilerOptions);
    grammar.bind();
    grammar.check();
    if (!compilerOptions.noEmit) {
        if (!compilerOptions.noEmitOnError || grammar.diagnostics.count() <= 0) {
            grammar.emit();
        }
    }
    if (grammar.diagnostics.count() > 0) {
        grammar.diagnostics.forEach(function (message) { return console.log(message); });
        process.exit(-1);
    }
}
main();

//# sourceMappingURL=cli.js.map
