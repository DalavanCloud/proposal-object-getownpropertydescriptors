var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/*!
 *  Copyright 2015 Ron Buckton (rbuckton@chronicles.org)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
var core_1 = require("./core");
var tokens_1 = require("./tokens");
exports.Diagnostics = {
    Constant_expected: { code: 1000, message: "Constant expected." },
    _0_expected: { code: 1001, message: "{0} expected." },
    _0_or_1_: { code: 0, message: "{0} or {1}" },
    Unexpected_token_0_: { code: 1002, message: "Unexpected token {0}." },
    Invalid_character: { code: 1003, message: "Invalid character." },
    Unterminated_string_literal: { code: 1004, message: "Unterminated string literal." },
    Invalid_escape_sequence: { code: 1005, message: "Invalid escape sequence." },
    Digit_expected: { code: 1006, message: "Digit expected." },
    Production_expected: { code: 1007, message: "Production expected." },
    Unterminated_identifier_literal: { code: 1008, message: "Unterminated identifier literal." },
    Obsolete_0_: { code: 1009, message: "Obsolete: {0}", warning: true },
    Cannot_find_name_0_: { code: 2000, message: "Cannot find name: '{0}'." },
    Duplicate_identifier_0_: { code: 2001, message: "Duplicate identifier: '{0}'." },
    Duplicate_terminal_0_: { code: 2002, message: "Duplicate terminal: `{0}`." },
};
var DiagnosticMessages = (function () {
    function DiagnosticMessages() {
        this.nextDiagnosticIndex = 0;
    }
    DiagnosticMessages.prototype.setSourceFile = function (sourceFile) {
        if (!this.sourceFiles) {
            this.sourceFiles = [];
            this.sourceFilesDiagnosticOffset = [];
        }
        var diagnosticOffset = this.count();
        var sourceFileIndex = this.sourceFiles.length;
        this.sourceFiles[sourceFileIndex] = sourceFile;
        this.sourceFilesDiagnosticOffset[sourceFileIndex] = diagnosticOffset;
    };
    DiagnosticMessages.prototype.report = function (pos, message) {
        this.reportDiagnostic(message, Array.prototype.slice.call(arguments, 2), pos);
    };
    DiagnosticMessages.prototype.reportNode = function (node, message) {
        var pos;
        if (node) {
            pos = node.pos;
        }
        this.reportDiagnostic(message, Array.prototype.slice.call(arguments, 2), pos);
    };
    DiagnosticMessages.prototype.count = function () {
        return this.diagnostics ? this.diagnostics.length : 0;
    };
    DiagnosticMessages.prototype.getMessage = function (diagnosticIndex) {
        var diagnostic = this.diagnostics && this.diagnostics[diagnosticIndex];
        if (diagnostic) {
            var diagnosticArguments = this.diagnosticsArguments && this.diagnosticsArguments[diagnosticIndex];
            var sourceFile = this.getSourceFile(diagnosticIndex);
            var text = sourceFile ? sourceFile.filename : "";
            if (this.diagnosticsPos && diagnosticIndex in this.diagnosticsPos) {
                var diagnosticPos = this.diagnosticsPos[diagnosticIndex];
                if (sourceFile && sourceFile.lineMap) {
                    text += "(" + sourceFile.lineMap.formatPosition(diagnosticPos) + ")";
                }
                else {
                    text += "(" + diagnosticPos + ")";
                }
            }
            text += ": ";
            text += diagnostic.warning ? "warning" : "error";
            text += " MG" + String(diagnostic.code) + ": ";
            var message = diagnostic.message;
            if (diagnosticArguments) {
                message = formatString(message, diagnosticArguments);
            }
            text += message;
            return text;
        }
        return "";
    };
    DiagnosticMessages.prototype.getDiagnostic = function (diagnosticIndex) {
        return this.diagnostics && this.diagnostics[diagnosticIndex];
    };
    DiagnosticMessages.prototype.getNode = function (diagnosticIndex) {
        return this.diagnosticsNode && this.diagnosticsNode[diagnosticIndex];
    };
    DiagnosticMessages.prototype.forEach = function (callback) {
        if (this.diagnostics) {
            for (var diagnosticIndex = 0, l = this.diagnostics.length; diagnosticIndex < l; diagnosticIndex++) {
                callback(this.getMessage(diagnosticIndex), diagnosticIndex);
            }
        }
    };
    DiagnosticMessages.prototype.reportDiagnostic = function (message, args, pos, node) {
        if (!this.diagnostics) {
            this.diagnostics = [];
        }
        var diagnosticIndex = this.diagnostics.length;
        this.diagnostics[diagnosticIndex] = message;
        if (args.length === 1 && args[0] instanceof Array) {
            args = args[0];
        }
        if (args.length > 0) {
            if (!this.diagnosticsArguments) {
                this.diagnosticsArguments = [];
            }
            this.diagnosticsArguments[diagnosticIndex] = args;
        }
        if (pos !== undefined) {
            if (!this.diagnosticsPos) {
                this.diagnosticsPos = [];
            }
            this.diagnosticsPos[diagnosticIndex] = pos;
        }
        if (node !== undefined) {
            if (!this.diagnosticsNode) {
                this.diagnosticsNode = [];
            }
            this.diagnosticsNode[diagnosticIndex] = node;
        }
    };
    DiagnosticMessages.prototype.getSourceFile = function (diagnosticIndex) {
        if (this.sourceFiles) {
            var offset = core_1.binarySearch(this.sourceFilesDiagnosticOffset, diagnosticIndex);
            if (offset < 0) {
                offset = (~offset) - 1;
            }
            while (offset + 1 < this.sourceFiles.length && this.sourceFilesDiagnosticOffset[offset + 1] === diagnosticIndex) {
                offset++;
            }
            return this.sourceFiles[offset];
        }
        return undefined;
    };
    return DiagnosticMessages;
})();
exports.DiagnosticMessages = DiagnosticMessages;
var NullDiagnosticMessages = (function (_super) {
    __extends(NullDiagnosticMessages, _super);
    function NullDiagnosticMessages() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(NullDiagnosticMessages, "instance", {
        get: function () {
            return this._instance || (this._instance = new NullDiagnosticMessages());
        },
        enumerable: true,
        configurable: true
    });
    NullDiagnosticMessages.prototype.reportCore = function (message, arg0, arg1) { return 0; };
    NullDiagnosticMessages.prototype.report = function (pos, message, arg0, arg1) { return 0; };
    NullDiagnosticMessages.prototype.reportNode = function (node, message, arg0, arg1) { return 0; };
    NullDiagnosticMessages.prototype.count = function () { return 0; };
    NullDiagnosticMessages.prototype.getMessage = function (diagnosticIndex) { return ""; };
    NullDiagnosticMessages.prototype.getDiagnostic = function (diagnosticIndex) { return undefined; };
    NullDiagnosticMessages.prototype.getNode = function (diagnosticIndex) { return undefined; };
    NullDiagnosticMessages.prototype.forEach = function (callback) { };
    return NullDiagnosticMessages;
})(DiagnosticMessages);
exports.NullDiagnosticMessages = NullDiagnosticMessages;
var LineMap = (function () {
    function LineMap(text) {
        this.text = text;
    }
    LineMap.prototype.formatPosition = function (pos) {
        this.computeLineStarts();
        var lineNumber = core_1.binarySearch(this.lineStarts, pos);
        if (lineNumber < 0) {
            // If the actual position was not found,
            // the binary search returns the negative value of the next line start
            // e.g. if the line starts at [5, 10, 23, 80] and the position requested was 20
            // then the search will return -2
            lineNumber = (~lineNumber) - 1;
        }
        return (lineNumber + 1) + "," + (pos - this.lineStarts[lineNumber] + 1);
    };
    LineMap.prototype.computeLineStarts = function () {
        if (this.lineStarts) {
            return;
        }
        var lineStarts = [];
        var lineStart = 0;
        for (var pos = 0; pos < this.text.length;) {
            var ch = this.text.charCodeAt(pos++);
            switch (ch) {
                case 13 /* CarriageReturn */:
                    if (this.text.charCodeAt(pos) === 10 /* LineFeed */) {
                        pos++;
                    }
                case 10 /* LineFeed */:
                case 8232 /* LineSeparator */:
                case 8233 /* ParagraphSeparator */:
                case 133 /* NextLine */:
                    lineStarts.push(lineStart);
                    lineStart = pos;
                    break;
            }
        }
        lineStarts.push(lineStart);
        this.lineStarts = lineStarts;
    };
    LineMap.prototype.isLineBreak = function (ch) {
        return ch === 13 /* CarriageReturn */
            || ch === 10 /* LineFeed */
            || ch === 8232 /* LineSeparator */
            || ch === 8233 /* ParagraphSeparator */
            || ch === 133 /* NextLine */;
    };
    return LineMap;
})();
exports.LineMap = LineMap;
function formatString(format) {
    var args = Array.prototype.slice.call(arguments, 1);
    if (args.length === 1 && args[0] instanceof Array) {
        args = args[0];
    }
    return format.replace(/{(\d+)}/g, function (_, index) { return args[index]; });
}
exports.formatString = formatString;
function formatList(tokens) {
    if (tokens.length <= 0) {
        return "";
    }
    else if (tokens.length === 1) {
        return tokens_1.tokenToString(tokens[0], /*quoted*/ true);
    }
    else if (tokens.length === 2) {
        return formatString(exports.Diagnostics._0_or_1_.message, tokens_1.tokenToString(tokens[0], /*quoted*/ true), tokens_1.tokenToString(tokens[1], /*quoted*/ true));
    }
    else {
        var text = "";
        for (var i = 0; i < tokens.length - 1; i++) {
            if (i > 0) {
                text += " ";
            }
            text += tokens_1.tokenToString(tokens[i], /*quoted*/ true);
            text += ",";
        }
        return formatString(exports.Diagnostics._0_or_1_.message, text, tokens_1.tokenToString(tokens[tokens.length - 1], /*quoted*/ true));
    }
}
exports.formatList = formatList;

//# sourceMappingURL=diagnostics.js.map
