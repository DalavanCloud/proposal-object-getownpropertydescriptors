/*!
 *  Copyright 2015 Ron Buckton (rbuckton@chronicles.org)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
function createEmptyPrototype() {
    if (Object.create) {
        return Object.freeze(Object.create(null));
    }
    var prototype = {};
    for (var _i = 0, _a = ["constructor", "toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable"]; _i < _a.length; _i++) {
        var name_1 = _a[_i];
        if (typeof prototype[name_1] !== "undefined") {
            prototype[name_1] = undefined;
        }
    }
    return Object.freeze ? Object.freeze(prototype) : prototype;
}
var Dict = (function () {
    function Dict(object) {
        if (object) {
            for (var key in object) {
                if (Dict.has(object, key)) {
                    this[key] = object[key];
                }
            }
        }
    }
    Dict.has = function (object, key) {
        return Object.prototype.hasOwnProperty.call(object, key);
    };
    Dict.get = function (object, key) {
        return Dict.has(object, key) ? object[key] : undefined;
    };
    Dict.set = function (object, key, value) {
        object[key] = value;
        return object;
    };
    Dict.assign = function (target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        for (var _a = 0; _a < sources.length; _a++) {
            var source = sources[_a];
            for (var key in source) {
                if (Dict.has(source, key)) {
                    Dict.set(target, key, Dict.get(source, key));
                }
            }
        }
        return target;
    };
    Dict.merge = function (target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        for (var _a = 0; _a < sources.length; _a++) {
            var source = sources[_a];
            for (var key in source) {
                if (Dict.has(source, key) && !Dict.has(target, key)) {
                    Dict.set(target, key, Dict.get(source, key));
                }
            }
        }
        return target;
    };
    Dict.forEach = function (object, callbackfn, thisArg) {
        for (var key in object) {
            if (Dict.has(object, key)) {
                var value = object[key];
                callbackfn.call(thisArg, value, key, object);
            }
        }
    };
    Dict.map = function (object, callbackfn, thisArg) {
        var newObject = new Dict();
        for (var key in object) {
            if (Dict.has(object, key)) {
                var value = object[key];
                var mappedValue = callbackfn.call(thisArg, value, key, object);
                newObject[key] = mappedValue;
            }
        }
        return newObject;
    };
    Dict.mapPairs = function (object, callbackfn, thisArg) {
        var newObject = new Dict();
        for (var key in object) {
            if (Dict.has(object, key)) {
                var value = object[key];
                var _a = callbackfn.call(thisArg, value, key, object), mappedKey = _a[0], mappedValue = _a[1];
                newObject[mappedKey] = mappedValue;
            }
        }
        return newObject;
    };
    Dict.filter = function (object, callbackfn, thisArg) {
        var newObject = new Dict();
        for (var key in object) {
            if (Dict.has(object, key)) {
                var value = object[key];
                if (callbackfn.call(thisArg, value, key, object)) {
                    newObject[key] = value;
                }
            }
        }
        return newObject;
    };
    Dict.some = function (object, callbackfn, thisArg) {
        for (var key in object) {
            if (Dict.has(object, key)) {
                var value = object[key];
                if (!callbackfn || callbackfn.call(thisArg, value, key, object)) {
                    return true;
                }
            }
        }
        return false;
    };
    Dict.every = function (object, callbackfn, thisArg) {
        var any = false;
        for (var key in object) {
            if (Dict.has(object, key)) {
                var value = object[key];
                if (!callbackfn.call(thisArg, value, key, object)) {
                    return false;
                }
                any = true;
            }
        }
        return any;
    };
    Dict.find = function (object, callbackfn, thisArg) {
        for (var key in object) {
            if (Dict.has(object, key)) {
                var value = object[key];
                if (callbackfn.call(value, key, object)) {
                    return value;
                }
            }
        }
        return undefined;
    };
    Dict.findKey = function (object, callbackfn, thisArg) {
        for (var key in object) {
            if (Dict.has(object, key)) {
                var value = object[key];
                if (callbackfn.call(value, key, object)) {
                    return key;
                }
            }
        }
        return undefined;
    };
    Dict.keyOf = function (object, value) {
        for (var key in object) {
            if (Dict.has(object, key)) {
                if (object[key] === value) {
                    return key;
                }
            }
        }
        return undefined;
    };
    Dict.includes = function (object, value) {
        for (var key in object) {
            if (Dict.has(object, key)) {
                if (object[key] === value) {
                    return true;
                }
            }
        }
        return false;
    };
    Dict.reduce = function (object, callbackfn, initialValue) {
        var aggregate = initialValue;
        for (var key in object) {
            if (Dict.has(object, key)) {
                var value = object[key];
                aggregate = callbackfn(aggregate, value, key, object);
            }
        }
        return aggregate;
    };
    Dict.turn = function (object, callbackfn, memo) {
        if (memo === void 0) { memo = object; }
        for (var key in object) {
            if (Dict.has(object, key)) {
                var value = object[key];
                callbackfn(memo, value, key, object);
            }
        }
        return memo;
    };
    Dict.invert = function (dict) {
        var inverted = new Dict();
        for (var key in dict) {
            if (Dict.has(dict, key)) {
                Dict.set(inverted, String(Dict.get(dict, key)), key);
            }
        }
        return inverted;
    };
    Dict.keys = function (dict) {
        var result = [];
        for (var key in dict) {
            if (Dict.has(dict, key)) {
                result.push(key);
            }
        }
        return result;
    };
    Dict.values = function (dict) {
        var result = [];
        for (var key in dict) {
            if (Dict.has(dict, key)) {
                result.push(Dict.get(dict, key));
            }
        }
        return result;
    };
    Dict.entries = function (dict) {
        var result = [];
        for (var key in dict) {
            if (Dict.has(dict, key)) {
                result.push([key, Dict.get(dict, key)]);
            }
        }
        return result;
    };
    return Dict;
})();
exports.Dict = Dict;
Dict.prototype = createEmptyPrototype();
function binarySearch(array, value) {
    var low = 0;
    var high = array.length - 1;
    while (low <= high) {
        var middle = low + ((high - low) >> 1);
        var midValue = array[middle];
        if (midValue === value) {
            return middle;
        }
        else if (midValue > value) {
            high = middle - 1;
        }
        else {
            low = middle + 1;
        }
    }
    return ~low;
}
exports.binarySearch = binarySearch;

//# sourceMappingURL=core.js.map
