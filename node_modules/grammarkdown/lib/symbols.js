var core_1 = require("./core");
var nextSymbolId = 0;
(function (SymbolKind) {
    SymbolKind[SymbolKind["SourceFile"] = 0] = "SourceFile";
    SymbolKind[SymbolKind["Production"] = 1] = "Production";
    SymbolKind[SymbolKind["Parameter"] = 2] = "Parameter";
})(exports.SymbolKind || (exports.SymbolKind = {}));
var SymbolKind = exports.SymbolKind;
var Symbol = (function () {
    function Symbol(kind, name) {
        this.id = ++nextSymbolId;
        this.kind = kind;
        this.name = name;
    }
    return Symbol;
})();
exports.Symbol = Symbol;
var SymbolTable = (function () {
    function SymbolTable() {
    }
    SymbolTable.prototype.resolveSymbol = function (name, kind) {
        if (name) {
            var symbols = this.getSymbols(kind, /*create*/ false);
            if (symbols) {
                return core_1.Dict.get(symbols, name);
            }
        }
        return undefined;
    };
    SymbolTable.prototype.declareSymbol = function (name, kind, parent) {
        var symbol;
        if (name) {
            var symbols = this.getSymbols(kind, /*create*/ true);
            if (core_1.Dict.has(symbols, name)) {
                symbol = core_1.Dict.get(symbols, name);
            }
            else {
                symbol = new Symbol(kind, name);
                symbols[name] = symbol;
            }
        }
        else {
            symbol = new Symbol(kind, "*missing*");
        }
        symbol.parent = parent;
        return symbol;
    };
    SymbolTable.prototype.getSymbols = function (kind, create) {
        if (!this.nameMap) {
            if (!create) {
                return;
            }
            this.nameMap = [];
        }
        if (create && !(kind in this.nameMap)) {
            this.nameMap[kind] = new core_1.Dict();
        }
        return this.nameMap[kind];
    };
    return SymbolTable;
})();
exports.SymbolTable = SymbolTable;

//# sourceMappingURL=symbols.js.map
